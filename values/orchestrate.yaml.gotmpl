{{ $kafkaURL := printf "kafka-%s.%s:9092" .Environment.Name .Values.kafka.namespace }}
{{ $kafkaEnv := ternary (dict "KAFKA_URL" $kafkaURL "KAFKA_SASL_ENABLED" true "KAFKA_SASL_MECHANISM" "PLAIN" "KAFKA_SASL_USER" .Values.kafka.auth.username "KAFKA_SASL_PASSWORD" .Values.kafka.auth.password) (dict "KAFKA_URL" $kafkaURL) .Values.kafka.auth.enabled }}
{{ $replicaCount := .Values | get "orchestrate.replicaCount" 1 }}
{{/* API Proxy cache TTL */}}
{{ $proxyCacheTTL := "2" }}

# Values for orchestrate.
global:
  environment:
    LOG_FORMAT: json
    {{- range $key,$value := .Values.orchestrate.global.environment }}
    {{ $key }}: {{ $value | quote }}
    {{- end }}
    {{- if .Values.qkm.enabled }}
    KEY_MANAGER_URL: {{ .Values.qkm.fullname }}.{{ .Values.qkm.namespace }}
    {{- if .Values.qkm.url }}
    KEY_MANAGER_URL: {{ .Values.qkm.url }}
    {{- end }}
    {{- end }}
    AUTH_JWT_ISSUER_URL: {{ .Values.orchestrate.auth.jwt.issuerUrl }}
    AUTH_JWT_AUDIENCE: {{ .Values.orchestrate.auth.jwt.audience }}
    AUTH_JWT_ORCHESTRATE_CLAIMS: {{ .Values.orchestrate.auth.jwt.claims }}
    KEY_MANAGER_STORE_NAME: {{ .Values.qkm.orchestrate.storeName }}
    {{- if .Values.qkm.auth.tls.enabled }}
    KEY_MANAGER_TLS_SKIP_VERIFY: false
    KEY_MANAGER_CLIENT_TLS_KEY: "/certificates/client.key"
    KEY_MANAGER_CLIENT_TLS_CERT: "/certificates/client.crt"
    {{- end }}

  environmentSecrets:
    KEY_MANAGER_API_KEY: {{ .Values.qkm.orchestrate.apiKey }}
    {{- range $key,$value := .Values.orchestrate.global.environmentSecrets }}
    {{ $key }}: {{ $value | quote }}
    {{- end }}
  imageCredentials:
    {{- .Values.orchestrate.global.imageCredentials | toYaml | nindent 4 }}
  image:
    {{- .Values.orchestrate.global.image | toYaml | nindent 4 }}
  serviceMonitor:
    enabled: {{ .Values.observability.enabled }}

api:
  enabled: true
  replicaCount: {{ $replicaCount }}
  {{- if .Values.domainName }}
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/affinity: cookie
      nginx.ingress.kubernetes.io/affinity-mode: persistent
      nginx.ingress.kubernetes.io/session-cookie-max-age: {{ $proxyCacheTTL | quote }}
    hosts:
      - host: {{ .Values.orchestrate.namespace }}.orchestrate.{{ .Values.domainName }}
        http:
          paths:
            - path: /
              pathType: Prefix
              backend:
                service:
                  port:
                    number: 80
    tls:
    - hosts:
      - {{ .Values.orchestrate.namespace }}.orchestrate.{{ .Values.domainName }}
  {{- end }}
  environment:
    {{- range $key, $value := $kafkaEnv }}
    {{ $key }}: {{ $value }}
    {{- end }}
    {{- if .Values.postgresqlHA.enabled }}
    DB_HOST: "postgresql-ha-pgpool.{{ .Values.postgresqlHA.namespace }}"
    DB_DATABASE: {{ .Values.postgresqlHA.postgresql.database | quote }}
    DB_USER: {{ .Values.postgresqlHA.postgresql.username | quote }}
    {{- else }}
    DB_HOST: "postgresql.{{ .Values.postgresql.namespace }}"
    DB_PORT: {{ .Values.postgresql.port }}
    DB_DATABASE: {{ .Values.postgresql.database | quote }}
    DB_USER: {{ .Values.postgresql.username | quote }}
    {{- end }}
    PROXY_CACHE_TTL: {{ $proxyCacheTTL }}s
    {{- range $key,$value := .Values.orchestrate.api.environment }}
    {{ $key }}: {{ $value | quote }}
    {{- end }}
  service:
    sessionAffinityTimeout: {{ $proxyCacheTTL }}
  environmentSecrets:
    {{- if .Values.postgresqlHA.enabled }}
    DB_PASSWORD: {{ .Values.postgresqlHA.postgresql.password | quote }}
    {{- else }}
    DB_PASSWORD: {{ .Values.postgresql.password | quote }}
    {{- end }}
    {{- range $key,$value := .Values.orchestrate.api.environmentSecrets }}
    {{ $key }}: {{ $value | quote }}
    {{- end }}
  {{- if gt $replicaCount 1 }}
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                    - api
            topologyKey: "topology.kubernetes.io/zone"
          weight: 100    
  {{- end }}

migrate:
  environment:
    {{- range $key, $value := $kafkaEnv }}
    {{ $key }}: {{ $value }}
    {{- end }}
    {{- if .Values.postgresqlHA.enabled }}
    DB_HOST: "postgresql-ha-pgpool.{{ .Values.postgresqlHA.namespace }}"
    DB_DATABASE: {{ .Values.postgresqlHA.postgresql.database | quote }}
    DB_USER: {{ .Values.postgresqlHA.postgresql.username | quote }}
    {{- else }}
    DB_HOST: {{ .Values.postgresql.host }}
    DB_PORT: {{ .Values.postgresql.port }}
    DB_DATABASE: {{ .Values.postgresql.database }}
    DB_USER: {{ .Values.postgresql.username }}
    DB_TLS_SSLMODE: "require"
    {{- end }}
    PROXY_CACHE_TTL: {{ $proxyCacheTTL }}s
    {{- range $key,$value := .Values.orchestrate.api.environment }}
    {{ $key }}: {{ $value | quote }}
    {{- end }}
  environmentSecrets:
    {{- if .Values.postgresqlHA.enabled }}
    DB_PASSWORD: {{ .Values.postgresqlHA.postgresql.password | quote }}
    {{- else }}
    DB_PASSWORD: {{ .Values.postgresql.password | quote }}
    {{- end }}
    {{- range $key,$value := .Values.orchestrate.migrate.environmentSecrets }}
    {{ $key }}: {{ $value | quote }}
    {{- end }}
  service:
    sessionAffinityTimeout: {{ $proxyCacheTTL }}
  



txListener:
  environment:
    {{- range $key, $value := $kafkaEnv }}
    {{ $key }}: {{ $value }}
    {{- end }}
    {{- range $key,$value := .Values.orchestrate.txListener.environment }}
    {{ $key }}: {{ $value | quote }}
    {{- end }}
  environmentSecrets:
    {{- range $key,$value := .Values.orchestrate.txListener.environmentSecrets }}
    {{ $key }}: {{ $value | quote }}
    {{- end }}

txSender:
  replicaCount: {{ $replicaCount }}
  environment:
    {{- range $key, $value := $kafkaEnv }}
    {{ $key }}: {{ $value }}
    {{- end }}
    REDIS_HOST: "redis-master.{{ .Values.redis.namespace }}"
    REDIS_PORT: "6379"
    REDIS_PASSWORD: {{ .Values.redis.password | quote }}
    {{- range $key,$value := .Values.orchestrate.txSender.environment }}
    {{ $key }}: {{ $value | quote }}
    {{- end }}
  environmentSecrets:
    {{- range $key,$value := .Values.orchestrate.txSender.environmentSecrets }}
    {{ $key }}: {{ $value | quote }}
    {{- end }}
  {{- if gt $replicaCount 1 }}
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                    - tx-sender
            topologyKey: "topology.kubernetes.io/zone"
          weight: 100    
  {{- end }}
test:
 enabled: {{ .Values.test.enabled }}
 report:
    enabled: {{ .Values.test.enabled }}