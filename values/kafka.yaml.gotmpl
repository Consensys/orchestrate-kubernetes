{{- if .Values.kafka.enabled }}
{{ $replicaCount := .Values | get "kafka.replicaCount" 1 }}

---
replicaCount: {{ $replicaCount }}
numPartitions: {{ .Values | get "kafka.numPartitions" 1 }}
logRetentionHours: {{ .Values | get "kafka.logRetentionHours" 24 }}
{{- if and .Values.domainName .Values.kafka.externalAccess.enabled }}
externalAccess:
  enabled: true
  service:
    type: LoadBalancer
    port: 9094
    annotations:
      external-dns.alpha.kubernetes.io/hostname: "{{ printf "{{ .targetPod }}" }}.{{ .Values.kafka.namespace }}.{{ .Values.domainName }}"
  autoDiscovery:
    enabled: true
serviceAccount:
  create: true
rbac:
  create: true
{{- end }}
{{- if .Values.kafka.auth.enabled }}
auth:
  clientProtocol: sasl
  saslMechanisms: plain
  jaas:
    clientUsers:
    - {{ .Values.kafka.auth.username }}
    clientPasswords:
    - {{ .Values.kafka.auth.password }}
    {{- if .Values.zookeeper.auth.enabled }}
    zookeeperUser: {{ .Values.zookeeper.auth.serverUsers }}
    zookeeperPassword: {{ .Values.zookeeper.auth.serverPasswords }}
    {{- end }}
{{- end }}
## Pod Disruption Budget configuration
## The PDB will only be created if replicaCount is greater than 1
## ref: https://kubernetes.io/docs/concepts/workloads/pods/disruptions
pdb:
  create: true
  ## Max number of pods that can be unavailable after the eviction
  maxUnavailable: 1
persistence:
  enabled: {{ .Values | get "kafka.persistence.enabled" true }}
  size: {{ .Values | get "kafka.persistence.size" "4Gi" }}
  storageClass: {{ .Values | get "kafka.persistence.storageClass" nil }}
metrics:
  kafka:
    enabled: {{ .Values | get "observability.enabled" false }}
  serviceMonitor:
    enabled: {{ .Values | get "observability.enabled" false }}
resources:
  requests:
    memory: {{ .Values | get "kafka.resources.requests.memory" "4Gi" }} 
    cpu: {{ .Values | get "kafka.resources.requests.cpu" "100m" }} 
  limits:
    memory: {{ .Values | get "kafka.resources.limits.memory" "8Gi" }} 
    cpu:  {{ .Values | get "kafka.resources.limits.cpu" "500m" }} 
{{- if gt $replicaCount 1 }}
affinity:
  podAntiAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
            - key: app
              operator: In
              values:
                - kafka
            - key: job-name
              operator: DoesNotExist
        topologyKey: "topology.kubernetes.io/zone"
  podAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 50
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: app
                operator: In
                values:
                  - zookeeper
          topologyKey: "kubernetes.io/hostname"
{{- end }}
zookeeper:
  replicaCount: {{ .Values | get "zookeeper.replicaCount" 1 }}
  resources:
    requests:
      memory: {{ .Values | get "zookeeper.resources.requests.memory" "512Mi" }}
      cpu:  {{ .Values | get "zookeeper.resources.requests.cpu" "100m" }}
    limits:
      memory: {{ .Values | get "zookeeper.resources.limits.memory" "1Gi" }}
      cpu: {{ .Values | get "zookeeper.resources.limits.cpu" "300m" }}
  persistence:
    enabled: {{ .Values | get "zookeeper.persistence.enabled" true }}
    size: {{ .Values | get "zookeeper.persistence.size" "2Gi" }}
    storageClass: {{ .Values | get "zookeeper.persistence.storageClass" nil }}
  metrics:
    enabled: {{ .Values | get "observability.enabled" false }}
  {{- if gt $replicaCount 1 }}
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
              - key: app
                operator: In
                values:
                  - zookeeper
          topologyKey: "topology.kubernetes.io/zone"
  {{- end }}
  {{- if .Values.zookeeper.auth.enabled }}
  auth:
    enabled: true
    serverUsers: {{ .Values.zookeeper.auth.serverUsers }}
    serverPasswords: {{ .Values.zookeeper.auth.serverPasswords }}
    clientUser: {{ .Values.zookeeper.auth.clientUser }}
    clientPassword: {{ .Values.zookeeper.auth.clientPassword }}
  {{- end }}
  {{- end }}
