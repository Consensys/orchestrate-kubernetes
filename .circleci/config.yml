version: 2.1

commands:
  init:
    description: "Install"
    steps:
      - checkout
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          authenticator-release-tag: v0.5.1
          cluster-name: ${AWS_EKS_CLUSTER_NAME}
          cluster-authentication-role-arn: ${AWS_EKS_ROLE_ARN}
      - helm/install-helm-client:
          version: v3.3.4
      - run:
          name: Install helm plugins
          command: helm plugin install https://github.com/databus23/helm-diff
      - run:
          name: Install helmfile
          command: |
            curl -L --fail --retry 3 -o ./helmfile  https://github.com/roboll/helmfile/releases/download/v0.130.0/helmfile_linux_amd64
            chmod +x ./helmfile
            sudo mv ./helmfile /usr/local/bin/helmfile

parameters:
  orchestrate-namespace:
    type: string
    default: ""
  orchestrate-tag:
    type: string
    default: ""
  

jobs:
  lint:
    executor: aws-eks/python3
    steps:
      - init
      - run:
          name: helmfile lint
          command: helmfile -e ${ENVIRONMENT_VALUES} -f helmfile-core.yaml lint
  validate:
    executor: aws-eks/python3
    steps:
      - init
      - run:
          name: helmfile dry-run
          command: helmfile -e ${ENVIRONMENT_VALUES} -f helmfile-core.yaml apply --args --dry-run --suppress-secrets --detailed-exitcode=false
  deploy:
    parameters:
      docker-image-registry:
        type: string
      docker-user:
        type: string
      docker-password:
        type: string
      kafka-sasl-password:
        type: string

    executor: aws-eks/python3
    environment:
      KAFKA_SASL_PASSWORD: << parameters.kafka-sasl-password >>
      REGISTRY_URL: << parameters.docker-image-registry >>
      REGISTRY_USERNAME: << parameters.docker-user >>
      REGISTRY_PASSWORD: << parameters.docker-password >>
      ORCHESTRATE_TAG: << pipeline.parameters.orchestrate-tag >>
      ORCHESTRATE_REPOSITORY: << parameters.docker-image-registry >>/orchestrate
      ORCHESTRATE_NAMESPACE: << pipeline.parameters.orchestrate-namespace >>
      ENVIRONMENT_VALUES: << pipeline.parameters.orchestrate-namespace >>
    steps:
      - init
      - run:
          name: helmfile apply
          command: helmfile -e << pipeline.parameters.orchestrate-namespace >> -f helmfile-core.yaml apply --suppress-secrets --detailed-exitcode=false --concurrency 1
      
  clean-namespaces:
    executor: aws-eks/python3
    steps:
      - init
      - run:
          name: Delete namespaces
          command: kubectl get ns -o go-template --template='{{range .items}}{{if .metadata.annotations.disposable}}{{if eq .metadata.annotations.disposable "true"}}{{.metadata.name}} {{.metadata.creationTimestamp}}{{"\n"}}{{end}}{{end}}{{end}}' | awk '$2 <= "'$(date -d'now-2 days' -Ins --utc | sed 's/+0000/Z/')'" { print $1 }' | xargs -r kubectl delete ns --grace-period=0 --force

orbs:
  aws-eks: circleci/aws-eks@1.0.0
  kubernetes: circleci/kubernetes@0.11.1
  helm: circleci/helm@1.2.0

version: 2.1

workflows:
  default:
    jobs:
      - lint:
          filters:
            branches:
              ignore:
                - master
      - validate:
          filters:
            branches:
              ignore:
                - master
          requires: 
            - lint

  circleci-api-qa:
    when: 
      equal: [ qa, << pipeline.parameters.orchestrate-namespace >> ]
    jobs:
      - deploy:
          context:
            - cloudsmith-tanuki-rw
          kafka-sasl-password: ${QA_KAFKA_SASL_PASSWORD}
          docker-password: ${CLOUDSMITH_PASS_RW}
          docker-user: ${CLOUDSMITH_USER_RW}
          docker-image-registry: ${CLOUDSMITH_DEV_REPO}

  circleci-api-staging:
    when: 
      equal: [ staging, << pipeline.parameters.orchestrate-namespace >> ]
    jobs:
      - deploy:
          context:
            - cloudsmith-tanuki-rw
          kafka-sasl-password: ${STAGING_KAFKA_SASL_PASSWORD}
          docker-password: ${CLOUDSMITH_PASS_RW}
          docker-user: ${CLOUDSMITH_USER_RW}
          docker-image-registry: ${CLOUDSMITH_DEV_REPO}
    
          
  schedule-clean-namespaces:
    triggers:
      - schedule:
          cron: "0 5 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - clean-namespaces
