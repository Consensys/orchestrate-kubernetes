version: 2.1

orbs:
  go: circleci/go@1.5.0
  aws-eks: circleci/aws-eks@1.0.0
  helm: circleci/helm@2.0.0

commands:
  init:
    description: "Install"
    steps:
      - run:
          name: Import parameters
          # Inspired by https://circleci.com/docs/2.0/env-vars/#setting-an-environment-variable-in-a-shell-command
          command: |
            [ "<< pipeline.parameters.environment_values >>" ] && echo 'export ENVIRONMENT_VALUES=<< pipeline.parameters.environment_values >>' >> $BASH_ENV
            [ "<< pipeline.parameters.orchestrate_namespace >>" ] && echo 'export ORCHESTRATE_NAMESPACE=<< pipeline.parameters.orchestrate_namespace >>' >> $BASH_ENV
            [ "<< pipeline.parameters.orchestrate_tag >>" ] && echo 'export ORCHESTRATE_TAG=<< pipeline.parameters.orchestrate_tag >>' >> $BASH_ENV
            [ "<< pipeline.parameters.orchestrate_repository >>" ] && echo 'export ORCHESTRATE_REPOSITORY=<< pipeline.parameters.orchestrate_repository >>' >> $BASH_ENV
            [ "<< pipeline.parameters.registry_url >>" ] && echo 'export REGISTRY_URL=<< pipeline.parameters.registry_url >>' >> $BASH_ENV
            [ "<< pipeline.parameters.registry_username >>" ] && echo 'export REGISTRY_USERNAME=<< pipeline.parameters.registry_username >>' >> $BASH_ENV
            [ "<< pipeline.parameters.registry_password >>" ] && echo 'export REGISTRY_PASSWORD=<< pipeline.parameters.registry_password >>' >> $BASH_ENV
            [ "<< pipeline.parameters.kafka_url >>" ] && echo 'export $KAFKA_URL=<< pipeline.parameters.kafka_url >>' >> $BASH_ENV
            [ "<< pipeline.parameters.kafka_sasl_password >>" ] && echo 'export KAFKA_SASL_PASSWORD=<< pipeline.parameters.kafka_sasl_password >>' >> $BASH_ENV

            source $BASH_ENV || true
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          authenticator-release-tag: v0.5.6
          install-kubectl: true
          cluster-name: ${AWS_EKS_CLUSTER_NAME}
      - helm/install-helm-client:
          version: v3.3.4
      - run:
          name: Install helm plugins
          command: helm plugin install https://github.com/databus23/helm-diff
      - run:
          name: Install helmfile
          command: |
            curl -L --fail --retry 3 -o ./helmfile  https://github.com/roboll/helmfile/releases/download/v0.130.0/helmfile_linux_amd64
            chmod +x ./helmfile
            sudo mv ./helmfile /usr/local/bin/helmfile

parameters:
  environment_values:
    type: string
    default: ""  
  orchestrate_namespace:
    type: string
    default: ""
  orchestrate_tag:
    type: string
    default: ""
  orchestrate_repository:
    type: string
    default: ""
  registry_url:
    type: string
    default: ""
  registry_username:
    type: string
    default: ""
  registry_password:
    type: string
    default: ""
  kafka_url:
    type: string
    default: ""
  kafka_sasl_password:
    type: string
    default: ""

jobs:
  lint:
    executor:
      name: go/default
      tag: '1.16.8'
    steps:
      - init
      - run:
          name: helmfile lint
          command: helmfile -e ${ENVIRONMENT_VALUES} -f helmfile-core.yaml lint
  validate:
    executor:
      name: go/default
      tag: '1.16.8'
    steps:
      - init
      - run:
          name: helmfile dry-run
          command: helmfile -e ${ENVIRONMENT_VALUES} -f helmfile-core.yaml apply --args --dry-run --suppress-secrets --detailed-exitcode=false
  deploy:
    executor:
      name: go/default
      tag: '1.16.8'
    steps:
      - init
      - run:
          name: helmfile apply
          command: helmfile -e ${ENVIRONMENT_VALUES} -f helmfile-core.yaml apply --suppress-secrets --detailed-exitcode=false --concurrency 1
      - when:
          condition:
            equal: [ default, << pipeline.parameters.environment_values >> ]
          steps:
            - run: 
                name: Annotate as disposable environement
                command: kubectl annotate --overwrite ns ${ORCHESTRATE_NAMESPACE} disposable=true
  clean-namespaces:
    executor:
      name: go/default
      tag: '1.16.8'
    steps:
      - init
      - run:
          name: Delete namespaces
          command: kubectl get ns -o go-template --template='{{range .items}}{{if .metadata.annotations.disposable}}{{if eq .metadata.annotations.disposable "true"}}{{.metadata.name}} {{.metadata.creationTimestamp}}{{"\n"}}{{end}}{{end}}{{end}}' | awk '$2 <= "'$(date -d'now-2 days' -Ins --utc | sed 's/+0000/Z/')'" { print $1 }' | xargs -r kubectl delete ns --grace-period=0 --force



workflows:
  default:
    jobs:
      - lint:
          filters:
            branches:
              ignore:
                - master
      - validate:
          filters:
            branches:
              ignore:
                - master
          requires: 
            - lint
  circleci-api:
    when: 
      and: 
        - << pipeline.parameters.environment_values >>
        - << pipeline.parameters.orchestrate_namespace >>
    jobs:
      - deploy:
          filters:
            branches:
              only:
                - master
  schedule-clean-namespaces:
    triggers:
      - schedule:
          cron: "0 5 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - clean-namespaces
